// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  username  String
  email     String        @unique
  password  String
  createdAt DateTime      @default(now())
  recipes   Recipe[]
  comments  Commentaire[]
}

model Recipe {
  id              String   @id @default(uuid())
  title           String
  description     String
  imageUrl        String
  createdAt       DateTime @default(now())
  userId          String?
  categoryId      String
  showId          String
  createdByName   String
  createdByAvatar String?

  user        User?              @relation(fields: [userId], references: [id])
  category    Category           @relation(fields: [categoryId], references: [id])
  show        Show               @relation(fields: [showId], references: [id])
  ingredients RecipeIngredient[]
  comments    Commentaire[]
  steps       Step[]
}

model Step {
  id       String @id @default(uuid())
  content  String
  order    Int
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Category {
  id      String   @id @default(uuid())
  name    String
  recipes Recipe[]
}

model Ingredient {
  id      String             @id @default(uuid())
  name    String
  recipes RecipeIngredient[]
}

model Show {
  id          String   @id @default(uuid())
  title       String
  description String
  releaseDate DateTime
  imageUrl    String
  typeShowId  String
  externalId  String   @unique

  typeShow TypeShow @relation(fields: [typeShowId], references: [id])
  recipes  Recipe[]
}

model TypeShow {
  id    String @id @default(uuid())
  name  String
  shows Show[]
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  quantity     String?

  recipe     Recipe     @relation(fields: [recipeId], references: [id])
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([recipeId, ingredientId])
}

model Commentaire {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  recipeId  String

  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])
}
